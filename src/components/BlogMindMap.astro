---
// SVG Mind Map component for blog posts
export interface Props {
  posts: Array<{
    slug: string;
    data: {
      title: string;
      tags: string[];
      publishDate: string;
    };
  }>;
}

const { posts } = Astro.props;
---

<div class="mindmap-section mb-12">
  <div class="text-center mb-8">
    <h2 class="text-3xl font-bold text-neutral-900 mb-4">Blog Mind Map</h2>
    <p class="text-lg text-neutral-600 max-w-2xl mx-auto">
      Explore the interconnected web of ideas and topics across all blog posts. 
      Each node represents a post, connected by shared tags and themes. Click on any node to read the full post.
    </p>
  </div>
  
  <div class="mindmap-container" id="mindmap-container">
    <svg id="mindmap-svg" width="100%" height="100%"></svg>
  </div>
  
  <div class="mt-4 text-center">
    <p class="text-sm text-neutral-500">
      ðŸ’¡ <strong>Philosophy:</strong> Knowledge is interconnected. This visualization shows how ideas flow and connect across different posts, 
      helping you discover related content and see the bigger picture of topics covered on this blog.
    </p>
  </div>
</div>

<script>
  import * as d3 from 'd3';
  
  // Mind map data (passed from Astro props)
  const postsData = JSON.parse(document.getElementById('posts-data')?.textContent || '[]');
  
  function createMindMap(posts: any[]) {
    const container = document.getElementById('mindmap-container');
    const svg = d3.select('#mindmap-svg');
    
    if (!container || !svg.node()) return;
    
    // Clear existing content
    svg.selectAll('*').remove();
    
    const width = container.offsetWidth;
    const height = container.offsetHeight;
    
    // Create nodes and links data structure
    const nodes: any[] = [];
    const links: any[] = [];
    const tagMap = new Map();
    
    // Create nodes for posts
    posts.forEach((post, index) => {
      nodes.push({
        id: post.slug,
        title: post.data.title,
        tags: post.data.tags,
        type: 'post',
        slug: post.slug,
        x: width / 2 + (Math.random() - 0.5) * 200,
        y: height / 2 + (Math.random() - 0.5) * 200
      });
      
      // Track tags
      post.data.tags.forEach((tag: string) => {
        if (!tagMap.has(tag)) {
          tagMap.set(tag, []);
        }
        tagMap.get(tag).push(post.slug);
      });
    });
    
    // Create links between posts that share tags
    tagMap.forEach((postSlugs, tag) => {
      if (postSlugs.length > 1) {
        for (let i = 0; i < postSlugs.length; i++) {
          for (let j = i + 1; j < postSlugs.length; j++) {
            links.push({
              source: postSlugs[i],
              target: postSlugs[j],
              tag: tag
            });
          }
        }
      }
    });
    
    // Create force simulation
    const simulation = d3.forceSimulation(nodes)
      .force('link', d3.forceLink(links).id((d: any) => d.id).distance(100))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collision', d3.forceCollide().radius(30));
    
    // Create links
    const link = svg.append('g')
      .selectAll('line')
      .data(links)
      .enter().append('line')
      .attr('class', 'mindmap-link')
      .attr('stroke-width', 1)
      .attr('stroke', '#e5e5e5');
    
    // Create nodes
    const node = svg.append('g')
      .selectAll('g')
      .data(nodes)
      .enter().append('g')
      .attr('class', 'mindmap-node')
      .call(d3.drag<any, any>()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));
    
    // Add circles to nodes
    node.append('circle')
      .attr('r', 20)
      .attr('fill', (d: any) => {
        // Color based on primary tag
        const colors = ['#0ea5e9', '#d946ef', '#06b6d4', '#84cc16', '#f59e0b', '#ef4444'];
        const tagIndex = d.tags[0] ? d.tags[0].charCodeAt(0) % colors.length : 0;
        return colors[tagIndex];
      })
      .attr('stroke', '#fff')
      .attr('stroke-width', 2);
    
    // Add labels to nodes
    node.append('text')
      .attr('class', 'mindmap-text')
      .attr('dy', '.35em')
      .style('font-size', '10px')
      .style('text-anchor', 'middle')
      .style('fill', '#404040')
      .text((d: any) => {
        // Truncate long titles
        return d.title.length > 15 ? d.title.substring(0, 15) + '...' : d.title;
      });
    
    // Add click handler to nodes
    node.on('click', (event, d: any) => {
      window.location.href = `/blog/${d.slug}`;
    });
    
    // Add hover effects
    node.on('mouseover', function(event, d: any) {
      d3.select(this).select('circle')
        .transition()
        .duration(200)
        .attr('r', 25);
      
      // Show tooltip
      const tooltip = d3.select('body').append('div')
        .attr('class', 'mindmap-tooltip')
        .style('position', 'absolute')
        .style('background', 'rgba(0, 0, 0, 0.8)')
        .style('color', 'white')
        .style('padding', '8px 12px')
        .style('border-radius', '4px')
        .style('font-size', '12px')
        .style('pointer-events', 'none')
        .style('z-index', '1000')
        .html(`<strong>${d.title}</strong><br>Tags: ${d.tags.join(', ')}`)
        .style('left', (event.pageX + 10) + 'px')
        .style('top', (event.pageY - 10) + 'px');
    })
    .on('mouseout', function(event, d: any) {
      d3.select(this).select('circle')
        .transition()
        .duration(200)
        .attr('r', 20);
      
      // Remove tooltip
      d3.selectAll('.mindmap-tooltip').remove();
    });
    
    // Update positions on simulation tick
    simulation.on('tick', () => {
      link
        .attr('x1', (d: any) => d.source.x)
        .attr('y1', (d: any) => d.source.y)
        .attr('x2', (d: any) => d.target.x)
        .attr('y2', (d: any) => d.target.y);
      
      node
        .attr('transform', (d: any) => `translate(${d.x},${d.y})`);
    });
    
    // Drag functions
    function dragstarted(event: any, d: any) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }
    
    function dragged(event: any, d: any) {
      d.fx = event.x;
      d.fy = event.y;
    }
    
    function dragended(event: any, d: any) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
    
    // Handle resize
    function handleResize() {
      const newWidth = container.offsetWidth;
      const newHeight = container.offsetHeight;
      
      svg.attr('width', newWidth).attr('height', newHeight);
      simulation.force('center', d3.forceCenter(newWidth / 2, newHeight / 2));
      simulation.alpha(0.3).restart();
    }
    
    window.addEventListener('resize', handleResize);
  }
  
  // Initialize mind map when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    if (postsData.length > 0) {
      createMindMap(postsData);
    }
  });
</script>

<!-- Hidden script tag to pass data from Astro to client-side JavaScript -->
<script id="posts-data" type="application/json" set:html={JSON.stringify(posts)}></script>