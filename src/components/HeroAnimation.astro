---
// Three.js hero animation component
---

<div class="hero-animation relative h-96 overflow-hidden rounded-lg bg-gradient-to-br from-primary-50 to-accent-50">
  <canvas id="hero-canvas" class="hero-canvas"></canvas>
  <div class="absolute inset-0 flex items-center justify-center z-10">
    <div class="text-center">
      <h1 class="text-4xl md:text-6xl font-bold text-neutral-900 mb-4 animate-fade-in">
        Creative Developer
      </h1>
      <p class="text-xl text-neutral-600 animate-slide-up">
        Building beautiful experiences with code
      </p>
    </div>
  </div>
  <!-- Fallback illustration for when Three.js fails to load -->
  <div id="fallback-illustration" class="absolute inset-0 hidden">
    <svg class="w-full h-full opacity-20" viewBox="0 0 400 300" fill="none" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
          <stop offset="0%" style="stop-color:#0ea5e9;stop-opacity:0.3" />
          <stop offset="100%" style="stop-color:#d946ef;stop-opacity:0.3" />
        </linearGradient>
      </defs>
      <circle cx="100" cy="100" r="50" fill="url(#grad1)" class="animate-float">
        <animateTransform
          attributeName="transform"
          attributeType="XML"
          type="translate"
          values="0,0; 10,5; 0,0"
          dur="3s"
          repeatCount="indefinite"
        />
      </circle>
      <circle cx="300" cy="200" r="30" fill="url(#grad1)" class="animate-float" style="animation-delay: 1s;">
        <animateTransform
          attributeName="transform"
          attributeType="XML"
          type="translate"
          values="0,0; -5,10; 0,0"
          dur="4s"
          repeatCount="indefinite"
        />
      </circle>
      <rect x="200" y="50" width="40" height="40" rx="8" fill="url(#grad1)" class="animate-float" style="animation-delay: 2s;">
        <animateTransform
          attributeName="transform"
          attributeType="XML"
          type="rotate"
          values="0 220 70; 360 220 70"
          dur="10s"
          repeatCount="indefinite"
        />
      </rect>
    </svg>
  </div>
</div>

<script>
  import * as THREE from 'three';
  
  // Initialize Three.js scene
  function initHeroAnimation() {
    const canvas = document.getElementById('hero-canvas') as HTMLCanvasElement;
    const fallback = document.getElementById('fallback-illustration');
    
    if (!canvas) return;
    
    try {
      // Scene setup
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, canvas.offsetWidth / canvas.offsetHeight, 0.1, 1000);
      const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });
      
      renderer.setSize(canvas.offsetWidth, canvas.offsetHeight);
      renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
      
      // Create floating geometric shapes
      const shapes: THREE.Mesh[] = [];
      
      // Sphere
      const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);
      const sphereMaterial = new THREE.MeshBasicMaterial({ 
        color: 0x0ea5e9, 
        transparent: true, 
        opacity: 0.7,
        wireframe: true 
      });
      const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
      sphere.position.set(-2, 1, 0);
      shapes.push(sphere);
      scene.add(sphere);
      
      // Cube
      const cubeGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.8);
      const cubeMaterial = new THREE.MeshBasicMaterial({ 
        color: 0xd946ef, 
        transparent: true, 
        opacity: 0.7,
        wireframe: true 
      });
      const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
      cube.position.set(2, -1, 0);
      shapes.push(cube);
      scene.add(cube);
      
      // Torus
      const torusGeometry = new THREE.TorusGeometry(0.6, 0.2, 16, 100);
      const torusMaterial = new THREE.MeshBasicMaterial({ 
        color: 0x06b6d4, 
        transparent: true, 
        opacity: 0.7,
        wireframe: true 
      });
      const torus = new THREE.Mesh(torusGeometry, torusMaterial);
      torus.position.set(0, 0, -1);
      shapes.push(torus);
      scene.add(torus);
      
      camera.position.z = 5;
      
      // Animation loop
      function animate() {
        requestAnimationFrame(animate);
        
        // Rotate shapes
        shapes.forEach((shape, index) => {
          shape.rotation.x += 0.01 * (index + 1);
          shape.rotation.y += 0.01 * (index + 1);
          
          // Floating motion
          shape.position.y += Math.sin(Date.now() * 0.001 + index) * 0.002;
        });
        
        renderer.render(scene, camera);
      }
      
      animate();
      
      // Handle resize
      function handleResize() {
        const width = canvas.offsetWidth;
        const height = canvas.offsetHeight;
        
        camera.aspect = width / height;
        camera.updateProjectionMatrix();
        renderer.setSize(width, height);
      }
      
      window.addEventListener('resize', handleResize);
      
      // Cleanup function
      return () => {
        window.removeEventListener('resize', handleResize);
        renderer.dispose();
        shapes.forEach(shape => {
          scene.remove(shape);
          shape.geometry.dispose();
          if (Array.isArray(shape.material)) {
            shape.material.forEach(material => material.dispose());
          } else {
            shape.material.dispose();
          }
        });
      };
      
    } catch (error) {
      console.warn('Three.js failed to initialize, showing fallback:', error);
      // Show fallback illustration
      if (fallback) {
        fallback.classList.remove('hidden');
      }
    }
  }
  
  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initHeroAnimation);
  } else {
    initHeroAnimation();
  }
</script>