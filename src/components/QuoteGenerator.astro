---
// Random developer quote generator with typewriter animation
---

<div class="quote-generator bg-white rounded-lg p-6 shadow-sm border border-neutral-200">
  <div class="flex items-start space-x-4">
    <div class="flex-shrink-0">
      <svg class="h-8 w-8 text-primary-600" fill="currentColor" viewBox="0 0 24 24">
        <path d="M14.017 21v-7.391c0-5.704 3.731-9.57 8.983-10.609l.995 2.151c-2.432.917-3.995 3.638-3.995 5.849h4v10h-9.983zm-14.017 0v-7.391c0-5.704 3.748-9.57 9-10.609l.996 2.151c-2.433.917-3.996 3.638-3.996 5.849h4v10h-10z"/>
      </svg>
    </div>
    <div class="flex-1">
      <blockquote class="text-lg text-neutral-700 mb-4">
        <span id="quote-text" class="typewriter-text"></span>
        <span class="typewriter-cursor">|</span>
      </blockquote>
      <cite class="text-sm text-neutral-500" id="quote-author"></cite>
    </div>
  </div>
  <button
    id="new-quote-btn"
    class="mt-4 px-4 py-2 text-sm bg-primary-600 text-white rounded-md hover:bg-primary-700 transition-colors focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2"
  >
    New Quote
  </button>
</div>

<script>
  // Developer quotes data (this would normally come from /data/quotes.yaml)
  const quotes = [
    {
      text: "The best error message is the one that never shows up.",
      author: "Thomas Fuchs"
    },
    {
      text: "Code is like humor. When you have to explain it, it's bad.",
      author: "Cory House"
    },
    {
      text: "First, solve the problem. Then, write the code.",
      author: "John Johnson"
    },
    {
      text: "Experience is the name everyone gives to their mistakes.",
      author: "Oscar Wilde"
    },
    {
      text: "In order to be irreplaceable, one must always be different.",
      author: "Coco Chanel"
    },
    {
      text: "Java is to JavaScript what car is to Carpet.",
      author: "Chris Heilmann"
    },
    {
      text: "Knowledge is power.",
      author: "Francis Bacon"
    },
    {
      text: "Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday's code.",
      author: "Dan Salomon"
    },
    {
      text: "Perfection is achieved not when there is nothing more to add, but rather when there is nothing more to take away.",
      author: "Antoine de Saint-Exupery"
    },
    {
      text: "Ruby is rubbish! PHP is phpantastic!",
      author: "Nikita Popov"
    }
  ];
  
  let currentQuoteIndex = 0;
  let isTyping = false;
  
  function typeWriter(text: string, element: HTMLElement, speed: number = 50): Promise<void> {
    return new Promise((resolve) => {
      element.textContent = '';
      let i = 0;
      isTyping = true;
      
      function type() {
        if (i < text.length) {
          element.textContent += text.charAt(i);
          i++;
          setTimeout(type, speed);
        } else {
          isTyping = false;
          resolve();
        }
      }
      
      type();
    });
  }
  
  async function displayQuote(index: number) {
    if (isTyping) return;
    
    const quote = quotes[index];
    const quoteTextElement = document.getElementById('quote-text');
    const quoteAuthorElement = document.getElementById('quote-author');
    
    if (quoteTextElement && quoteAuthorElement) {
      await typeWriter(quote.text, quoteTextElement, 30);
      quoteAuthorElement.textContent = `â€” ${quote.author}`;
    }
  }
  
  function getRandomQuote() {
    let newIndex;
    do {
      newIndex = Math.floor(Math.random() * quotes.length);
    } while (newIndex === currentQuoteIndex && quotes.length > 1);
    
    currentQuoteIndex = newIndex;
    displayQuote(currentQuoteIndex);
  }
  
  // Initialize with first quote
  document.addEventListener('DOMContentLoaded', () => {
    displayQuote(0);
    
    // Add event listener to new quote button
    const newQuoteBtn = document.getElementById('new-quote-btn');
    if (newQuoteBtn) {
      newQuoteBtn.addEventListener('click', getRandomQuote);
    }
  });
</script>

<style>
  .typewriter-cursor {
    animation: blink 1s infinite;
    color: #0ea5e9;
  }
  
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
</style>