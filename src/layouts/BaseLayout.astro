---
export interface Props {
  title: string;
  description?: string;
  image?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  modifiedTime?: string;
}

const {
  title,
  description = import.meta.env.PUBLIC_SITE_DESCRIPTION,
  image = '/og-image.jpg',
  type = 'website',
  publishedTime,
  modifiedTime
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(image, Astro.url);
---

<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&family=Playfair+Display:wght@400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImageURL} />
    {publishedTime && <meta property="article:published_time" content={publishedTime} />}
    {modifiedTime && <meta property="article:modified_time" content={modifiedTime} />}
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />
    
    <!-- JSON-LD -->
    <script type="application/ld+json">
      {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "name": "Fayaz Ahmed - Creative Developer",
        "url": "https://fayaz.dev",
        "description": "Creative developer blog featuring web development, design, and technology insights",
        "author": {
          "@type": "Person",
          "name": "Fayaz Ahmed",
          "url": "https://fayaz.dev/about"
        }
      }
    </script>
    
    <title>{title}</title>
  </head>
  <body class="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 transition-colors duration-300">
    <slot />
    
    <!-- Back to Top Button -->
    <button
      id="back-to-top"
      class="fixed bottom-8 right-8 bg-primary-600 hover:bg-primary-700 text-white p-3 rounded-full shadow-lg opacity-0 invisible transition-all duration-300 z-50 group"
      aria-label="Back to top"
    >
      <svg class="w-5 h-5 transform group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
      </svg>
    </button>
    
    <!-- Cookie Consent -->
    <div id="cookie-consent" class="fixed bottom-4 left-4 right-4 md:left-auto md:right-4 md:max-w-sm bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-4 opacity-0 invisible transition-all duration-300 z-50">
      <p class="text-sm text-gray-600 dark:text-gray-300 mb-3">
        We use cookies to enhance your experience. By continuing to visit this site you agree to our use of cookies.
      </p>
      <div class="flex gap-2">
        <button id="accept-cookies" class="bg-primary-600 hover:bg-primary-700 text-white px-3 py-1 rounded text-sm transition-colors">
          Accept
        </button>
        <button id="decline-cookies" class="text-gray-600 dark:text-gray-300 hover:text-gray-800 dark:hover:text-gray-100 px-3 py-1 rounded text-sm transition-colors">
          Decline
        </button>
      </div>
    </div>
    
    <script>
      // Back to top functionality
      const backToTopButton = document.getElementById('back-to-top');
      
      window.addEventListener('scroll', () => {
        if (window.pageYOffset > 300) {
          backToTopButton?.classList.remove('opacity-0', 'invisible');
        } else {
          backToTopButton?.classList.add('opacity-0', 'invisible');
        }
      });
      
      backToTopButton?.addEventListener('click', () => {
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
      
      // Cookie consent
      const cookieConsent = document.getElementById('cookie-consent');
      const acceptButton = document.getElementById('accept-cookies');
      const declineButton = document.getElementById('decline-cookies');
      
      if (!localStorage.getItem('cookieConsent')) {
        setTimeout(() => {
          cookieConsent?.classList.remove('opacity-0', 'invisible');
        }, 2000);
      }
      
      acceptButton?.addEventListener('click', () => {
        localStorage.setItem('cookieConsent', 'accepted');
        cookieConsent?.classList.add('opacity-0', 'invisible');
      });
      
      declineButton?.addEventListener('click', () => {
        localStorage.setItem('cookieConsent', 'declined');
        cookieConsent?.classList.add('opacity-0', 'invisible');
      });
      
      // Dark mode toggle
      const darkModeToggle = document.getElementById('dark-mode-toggle');
      const html = document.documentElement;
      
      // Check for saved theme preference or default to light mode
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme) {
        html.classList.toggle('dark', savedTheme === 'dark');
      } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        html.classList.add('dark');
      }
      
      darkModeToggle?.addEventListener('click', () => {
        html.classList.toggle('dark');
        localStorage.setItem('theme', html.classList.contains('dark') ? 'dark' : 'light');
      });
    </script>
  </body>
</html>