---
import BaseLayout from '@/layouts/BaseLayout.astro';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import { getCollection } from 'astro:content';

const allPosts = await getCollection('blog');
const publishedPosts = allPosts
  .filter(post => !post.data.draft)
  .sort((a, b) => new Date(b.data.publishDate).getTime() - new Date(a.data.publishDate).getTime());

// Get all unique tags
const allTags = [...new Set(allPosts.flatMap(post => post.data.tags))];
---

<BaseLayout title="Blog - Fayaz Ahmed" description="Articles about web development, design, and technology">
  <Header />
  
  <main class="min-h-screen">
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-primary-50 to-accent-50 dark:from-gray-800 dark:to-gray-700 py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-4xl sm:text-5xl font-display font-bold text-gray-900 dark:text-white mb-6">
            Blog
          </h1>
          <p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto mb-8">
            Insights on web development, creative coding, design patterns, and modern technologies. 
            Join me on this journey of continuous learning and discovery.
          </p>
          
          <!-- Blog Stats -->
          <div class="flex flex-wrap justify-center gap-8 text-sm text-gray-600 dark:text-gray-300">
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              {publishedPosts.length} Articles
            </div>
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
              </svg>
              {allTags.length} Topics
            </div>
            <div class="flex items-center">
              <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Updated Weekly
            </div>
          </div>
        </div>
      </div>
    </section>
    
    <!-- Mind Map Section -->
    <section class="py-16 bg-white dark:bg-gray-900">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-display font-bold text-gray-900 dark:text-white mb-4">
            Blog Mind Map
          </h2>
          <p class="text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
            Explore the connections between articles and topics. Click on nodes to navigate to related content.
          </p>
        </div>
        
        <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-8 min-h-[400px] flex items-center justify-center">
          <div id="mind-map" class="w-full h-96">
            <!-- Mind map will be rendered here -->
            <div class="text-center text-gray-500 dark:text-gray-400">
              <svg class="w-16 h-16 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7"></path>
              </svg>
              <p>Interactive mind map coming soon...</p>
              <p class="text-sm mt-2">This will show connections between blog posts and topics</p>
            </div>
          </div>
        </div>
      </div>
    </section>
    
    <!-- Tag Filter -->
    <section class="py-8 bg-gray-50 dark:bg-gray-800 border-y border-gray-200 dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-wrap items-center gap-4">
          <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Filter by topic:</span>
          <button 
            class="tag-filter active px-3 py-1 text-sm rounded-full bg-primary-600 text-white hover:bg-primary-700 transition-colors"
            data-tag="all"
          >
            All
          </button>
          {allTags.map(tag => (
            <button 
              class="tag-filter px-3 py-1 text-sm rounded-full bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors"
              data-tag={tag}
            >
              {tag}
            </button>
          ))}
        </div>
      </div>
    </section>
    
    <!-- Blog Posts Grid -->
    <section class="py-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="posts-grid">
          {publishedPosts.map((post) => (
            <article 
              class="blog-post-card bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 overflow-hidden group"
              data-tags={post.data.tags.join(',')}
            >
              {post.data.heroImage && (
                <div class="aspect-video overflow-hidden">
                  <img 
                    src={post.data.heroImage} 
                    alt={post.data.title}
                    class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                    loading="lazy"
                  />
                </div>
              )}
              
              <div class="p-6">
                <div class="flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3">
                  <time datetime={post.data.publishDate.toISOString()}>
                    {post.data.publishDate.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  {post.data.readingTime && (
                    <>
                      <span class="mx-2">â€¢</span>
                      <span>{post.data.readingTime}</span>
                    </>
                  )}
                </div>
                
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-3 group-hover:text-primary-600 dark:group-hover:text-primary-400 transition-colors">
                  <a href={`/blog/${post.slug}`} class="block">
                    {post.data.title}
                  </a>
                </h2>
                
                <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-3">
                  {post.data.description}
                </p>
                
                <div class="flex flex-wrap gap-2 mb-4">
                  {post.data.tags.slice(0, 3).map((tag) => (
                    <span class="px-2 py-1 bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 text-xs rounded-full">
                      {tag}
                    </span>
                  ))}
                  {post.data.tags.length > 3 && (
                    <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 text-xs rounded-full">
                      +{post.data.tags.length - 3} more
                    </span>
                  )}
                </div>
                
                <a 
                  href={`/blog/${post.slug}`}
                  class="inline-flex items-center text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium transition-colors"
                >
                  Read article
                  <svg class="w-4 h-4 ml-1 transform group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              </div>
            </article>
          ))}
        </div>
        
        <!-- No posts message (hidden by default) -->
        <div id="no-posts" class="text-center py-12 hidden">
          <svg class="w-16 h-16 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No posts found</h3>
          <p class="text-gray-600 dark:text-gray-300">Try selecting a different tag or browse all posts.</p>
        </div>
      </div>
    </section>
  </main>
  
  <Footer />
  
  <script>
    // Tag filtering functionality
    const tagFilters = document.querySelectorAll('.tag-filter');
    const postCards = document.querySelectorAll('.blog-post-card');
    const noPostsMessage = document.getElementById('no-posts');
    
    tagFilters.forEach(filter => {
      filter.addEventListener('click', () => {
        const selectedTag = filter.dataset.tag;
        
        // Update active state
        tagFilters.forEach(f => f.classList.remove('active', 'bg-primary-600', 'text-white'));
        tagFilters.forEach(f => f.classList.add('bg-white', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300', 'border', 'border-gray-300', 'dark:border-gray-600'));
        
        filter.classList.add('active', 'bg-primary-600', 'text-white');
        filter.classList.remove('bg-white', 'dark:bg-gray-700', 'text-gray-700', 'dark:text-gray-300', 'border', 'border-gray-300', 'dark:border-gray-600');
        
        // Filter posts
        let visibleCount = 0;
        postCards.forEach(card => {
          const cardTags = card.dataset.tags.split(',');
          const shouldShow = selectedTag === 'all' || cardTags.includes(selectedTag);
          
          if (shouldShow) {
            card.style.display = 'block';
            card.classList.add('animate-fade-in');
            visibleCount++;
          } else {
            card.style.display = 'none';
            card.classList.remove('animate-fade-in');
          }
        });
        
        // Show/hide no posts message
        if (visibleCount === 0) {
          noPostsMessage?.classList.remove('hidden');
        } else {
          noPostsMessage?.classList.add('hidden');
        }
      });
    });
  </script>
</BaseLayout>