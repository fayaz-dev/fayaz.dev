---
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogMindMap from '../../components/BlogMindMap.astro';
import { getCollection } from 'astro:content';
import { formatDate } from '../../utils/date';

// Get all blog posts
const allPosts = await getCollection('blog');
const publishedPosts = allPosts
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());

// Get all unique tags
const allTags = [...new Set(publishedPosts.flatMap(post => post.data.tags))].sort();

// Group posts by year
const postsByYear = publishedPosts.reduce((acc, post) => {
  const year = post.data.publishDate.getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(post);
  return acc;
}, {} as Record<number, typeof publishedPosts>);

const years = Object.keys(postsByYear).map(Number).sort((a, b) => b - a);
---

<BaseLayout 
  title="Blog - fayaz.dev" 
  description="Explore articles on web development, design, and technology. Discover insights, tutorials, and thoughts from a creative developer's journey."
>
  <div class="mx-auto max-w-7xl px-4 py-8 sm:px-6 lg:px-8">
    <!-- Header -->
    <header class="text-center mb-12">
      <h1 class="text-4xl md:text-5xl font-bold text-neutral-900 mb-4">
        Blog
      </h1>
      <p class="text-xl text-neutral-600 max-w-2xl mx-auto text-pretty">
        A collection of thoughts, tutorials, and discoveries from my journey as a creative developer. 
        Explore the mind map below to see how ideas connect across different posts.
      </p>
    </header>

    <!-- Mind Map Section -->
    {publishedPosts.length > 0 && (
      <BlogMindMap posts={publishedPosts} />
    )}

    <!-- Tag Filter -->
    <div class="mb-8">
      <h3 class="text-lg font-semibold text-neutral-900 mb-4">Filter by Topic</h3>
      <div class="flex flex-wrap gap-2">
        <button
          class="tag-filter active"
          data-tag="all"
        >
          All Posts
        </button>
        {allTags.map(tag => (
          <button
            class="tag-filter"
            data-tag={tag}
          >
            {tag}
          </button>
        ))}
      </div>
    </div>

    <!-- Posts Timeline -->
    <div class="space-y-12">
      {years.map(year => (
        <section class="year-section" data-year={year}>
          <h2 class="text-2xl font-bold text-neutral-900 mb-6 sticky top-20 bg-neutral-50 py-2 z-10">
            {year}
          </h2>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {postsByYear[year].map((post, index) => (
              <article 
                class="post-card card rounded-lg p-6 animate-slide-up" 
                style={`animation-delay: ${index * 0.05}s;`}
                data-tags={post.data.tags.join(',')}
              >
                {post.data.image && (
                  <div class="mb-4">
                    <img
                      src={post.data.image}
                      alt={post.data.title}
                      class="w-full h-32 object-cover rounded-md"
                      loading="lazy"
                    />
                  </div>
                )}
                <div class="flex flex-wrap gap-2 mb-3">
                  {post.data.tags.map(tag => (
                    <span class="tag text-xs">
                      {tag}
                    </span>
                  ))}
                </div>
                <h3 class="text-lg font-semibold text-neutral-900 mb-2">
                  <a href={`/blog/${post.slug}`} class="hover:text-primary-600 transition-colors">
                    {post.data.title}
                  </a>
                </h3>
                <p class="text-neutral-600 text-sm mb-3 line-clamp-2">
                  {post.data.description}
                </p>
                <div class="flex items-center justify-between text-xs text-neutral-500">
                  <time datetime={post.data.publishDate.toISOString()}>
                    {formatDate(post.data.publishDate)}
                  </time>
                  {post.data.featured && (
                    <span class="bg-accent-100 text-accent-700 px-2 py-1 rounded-full text-xs font-medium">
                      Featured
                    </span>
                  )}
                </div>
              </article>
            ))}
          </div>
        </section>
      ))}
    </div>

    {publishedPosts.length === 0 && (
      <div class="text-center py-12">
        <h2 class="text-2xl font-semibold text-neutral-900 mb-4">No posts yet</h2>
        <p class="text-neutral-600">
          Check back soon for new content!
        </p>
      </div>
    )}
  </div>
</BaseLayout>

<script>
  // Tag filtering functionality
  const tagFilters = document.querySelectorAll('.tag-filter');
  const postCards = document.querySelectorAll('.post-card');
  const yearSections = document.querySelectorAll('.year-section');
  
  tagFilters.forEach(filter => {
    filter.addEventListener('click', () => {
      const selectedTag = filter.getAttribute('data-tag');
      
      // Update active filter
      tagFilters.forEach(f => f.classList.remove('active'));
      filter.classList.add('active');
      
      // Filter posts
      postCards.forEach(card => {
        const cardTags = card.getAttribute('data-tags')?.split(',') || [];
        const shouldShow = selectedTag === 'all' || cardTags.includes(selectedTag);
        
        if (shouldShow) {
          card.style.display = 'block';
          card.classList.add('animate-fade-in');
        } else {
          card.style.display = 'none';
          card.classList.remove('animate-fade-in');
        }
      });
      
      // Hide/show year sections based on visible posts
      yearSections.forEach(section => {
        const visiblePosts = section.querySelectorAll('.post-card[style*="display: block"], .post-card:not([style*="display: none"])');
        if (selectedTag === 'all' || visiblePosts.length > 0) {
          section.style.display = 'block';
        } else {
          section.style.display = 'none';
        }
      });
    });
  });
</script>

<style>
  .tag-filter {
    @apply px-3 py-1 text-sm border border-neutral-300 rounded-full bg-white text-neutral-700 hover:bg-neutral-50 transition-colors cursor-pointer;
  }
  
  .tag-filter.active {
    @apply bg-primary-600 text-white border-primary-600;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>